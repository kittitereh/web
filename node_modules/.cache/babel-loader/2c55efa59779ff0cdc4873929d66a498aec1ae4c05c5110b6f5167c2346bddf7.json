{"ast":null,"code":"import SvgIcon from '../SvgIcon/SvgIcon';\nimport markdown from '../../utils/markdown';\nimport { IMAGE_TYPES } from '../../utils/constants';\nexport default {\n  name: 'FormatMessage',\n  components: {\n    SvgIcon\n  },\n  props: {\n    messageId: {\n      type: String,\n      default: ''\n    },\n    roomId: {\n      type: String,\n      default: ''\n    },\n    roomList: {\n      type: Boolean,\n      default: false\n    },\n    content: {\n      type: [String, Number],\n      required: true\n    },\n    deleted: {\n      type: Boolean,\n      default: false\n    },\n    users: {\n      type: Array,\n      default: () => []\n    },\n    linkify: {\n      type: Boolean,\n      default: true\n    },\n    singleLine: {\n      type: Boolean,\n      default: false\n    },\n    reply: {\n      type: Boolean,\n      default: false\n    },\n    textFormatting: {\n      type: Object,\n      required: true\n    },\n    textMessages: {\n      type: Object,\n      default: () => {}\n    },\n    linkOptions: {\n      type: Object,\n      required: true\n    }\n  },\n  emits: ['open-user-tag'],\n  computed: {\n    parsedMessage() {\n      if (this.deleted) {\n        return [{\n          value: this.textMessages.MESSAGE_DELETED\n        }];\n      }\n      let options;\n      if (!this.textFormatting.disabled) {\n        options = {\n          textFormatting: {\n            linkify: this.linkify,\n            linkOptions: this.linkOptions,\n            singleLine: this.singleLine,\n            reply: this.reply,\n            users: this.users,\n            ...this.textFormatting\n          }\n        };\n      } else {\n        options = {};\n      }\n      const message = markdown(this.content, options);\n      message.forEach(m => {\n        m.markdown = this.checkType(m, 'markdown');\n        m.tag = this.checkType(m, 'tag');\n        m.image = this.checkImageType(m);\n      });\n      return message;\n    }\n  },\n  methods: {\n    checkType(message, type) {\n      return message.types && message.types.indexOf(type) !== -1;\n    },\n    checkImageType(message) {\n      let index = message.value.lastIndexOf('.');\n      const slashIndex = message.value.lastIndexOf('/');\n      if (slashIndex > index) index = -1;\n      const type = message.value.substring(index + 1, message.value.length);\n      const isMedia = index > 0 && IMAGE_TYPES.some(t => type.toLowerCase().includes(t));\n      if (isMedia) this.setImageSize(message);\n      return isMedia;\n    },\n    setImageSize(message) {\n      const image = new Image();\n      image.src = message.value;\n      image.addEventListener('load', onLoad);\n      function onLoad(img) {\n        const ratio = img.path[0].width / 150;\n        message.height = Math.round(img.path[0].height / ratio) + 'px';\n        image.removeEventListener('load', onLoad);\n      }\n    },\n    openTag(event) {\n      const userId = event.target.getAttribute('data-user-id');\n      if (!this.singleLine && userId) {\n        const user = this.users.find(u => String(u._id) === userId);\n        this.$emit('open-user-tag', user);\n      }\n    }\n  }\n};","map":{"version":3,"names":["SvgIcon","markdown","IMAGE_TYPES","name","components","props","messageId","type","String","default","roomId","roomList","Boolean","content","Number","required","deleted","users","Array","linkify","singleLine","reply","textFormatting","Object","textMessages","linkOptions","emits","computed","parsedMessage","value","MESSAGE_DELETED","options","disabled","message","forEach","m","checkType","tag","image","checkImageType","methods","types","indexOf","index","lastIndexOf","slashIndex","substring","length","isMedia","some","t","toLowerCase","includes","setImageSize","Image","src","addEventListener","onLoad","img","ratio","path","width","height","Math","round","removeEventListener","openTag","event","userId","target","getAttribute","user","find","u","_id","$emit"],"sources":["/home/kittitereh/Desktop/web-vue-project/src/views/Chats.vue"],"sourcesContent":["<template>\n\t<div\n\t\tclass=\"vac-format-message-wrapper\"\n\t\t:class=\"{ 'vac-text-ellipsis': singleLine }\"\n\t>\n\t\t<template v-for=\"(message, i) in parsedMessage\" :key=\"i\">\n\t\t\t<div\n\t\t\t\tv-if=\"message.markdown\"\n\t\t\t\tclass=\"markdown\"\n\t\t\t\t@click=\"openTag\"\n\t\t\t\tv-html=\"message.value\"\n\t\t\t/>\n\t\t\t<div\n\t\t\t\tv-else\n\t\t\t\tclass=\"vac-format-container\"\n\t\t\t\t:class=\"{ 'vac-text-ellipsis': singleLine }\"\n\t\t\t>\n\t\t\t\t<component\n\t\t\t\t\t:is=\"message.url ? 'a' : 'span'\"\n\t\t\t\t\t:class=\"{\n\t\t\t\t\t\t'vac-text-ellipsis': singleLine,\n\t\t\t\t\t\t'vac-text-tag': !singleLine && !reply && message.tag\n\t\t\t\t\t}\"\n\t\t\t\t\t:href=\"message.href\"\n\t\t\t\t\t:target=\"message.href ? linkOptions.target : null\"\n\t\t\t\t\t:rel=\"message.href ? linkOptions.rel : null\"\n\t\t\t\t>\n\t\t\t\t\t<template v-if=\"deleted\">\n\t\t\t\t\t\t<slot\n\t\t\t\t\t\t\t:name=\"\n\t\t\t\t\t\t\t\troomList\n\t\t\t\t\t\t\t\t\t? 'deleted-icon-room_' + roomId\n\t\t\t\t\t\t\t\t\t: 'deleted-icon_' + messageId\n\t\t\t\t\t\t\t\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<svg-icon\n\t\t\t\t\t\t\t\tname=\"deleted\"\n\t\t\t\t\t\t\t\tclass=\"vac-icon-deleted\"\n\t\t\t\t\t\t\t\t:class=\"{ 'vac-icon-deleted-room': roomList }\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t{{ textMessages.MESSAGE_DELETED }}\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-else-if=\"message.url && message.image\">\n\t\t\t\t\t\t<div class=\"vac-image-link-container\">\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclass=\"vac-image-link\"\n\t\t\t\t\t\t\t\t:style=\"{\n\t\t\t\t\t\t\t\t\t'background-image': `url('${message.value}')`,\n\t\t\t\t\t\t\t\t\theight: message.height\n\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"vac-image-link-message\">\n\t\t\t\t\t\t\t{{ message.value }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<template v-else>\n\t\t\t\t\t\t{{ message.value }}\n\t\t\t\t\t</template>\n\t\t\t\t</component>\n\t\t\t</div>\n\t\t</template>\n\t</div>\n</template>\n\n<script>\nimport SvgIcon from '../SvgIcon/SvgIcon'\n\nimport markdown from '../../utils/markdown'\nimport { IMAGE_TYPES } from '../../utils/constants'\n\nexport default {\n\tname: 'FormatMessage',\n\tcomponents: { SvgIcon },\n\n\tprops: {\n\t\tmessageId: { type: String, default: '' },\n\t\troomId: { type: String, default: '' },\n\t\troomList: { type: Boolean, default: false },\n\t\tcontent: { type: [String, Number], required: true },\n\t\tdeleted: { type: Boolean, default: false },\n\t\tusers: { type: Array, default: () => [] },\n\t\tlinkify: { type: Boolean, default: true },\n\t\tsingleLine: { type: Boolean, default: false },\n\t\treply: { type: Boolean, default: false },\n\t\ttextFormatting: { type: Object, required: true },\n\t\ttextMessages: { type: Object, default: () => {} },\n\t\tlinkOptions: { type: Object, required: true }\n\t},\n\n\temits: ['open-user-tag'],\n\n\tcomputed: {\n\t\tparsedMessage() {\n\t\t\tif (this.deleted) {\n\t\t\t\treturn [{ value: this.textMessages.MESSAGE_DELETED }]\n\t\t\t}\n\n\t\t\tlet options\n\t\t\tif (!this.textFormatting.disabled) {\n\t\t\t\toptions = {\n\t\t\t\t\ttextFormatting: {\n\t\t\t\t\t\tlinkify: this.linkify,\n\t\t\t\t\t\tlinkOptions: this.linkOptions,\n\t\t\t\t\t\tsingleLine: this.singleLine,\n\t\t\t\t\t\treply: this.reply,\n\t\t\t\t\t\tusers: this.users,\n\t\t\t\t\t\t...this.textFormatting\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toptions = {}\n\t\t\t}\n\n\t\t\tconst message = markdown(this.content, options)\n\n\t\t\tmessage.forEach(m => {\n\t\t\t\tm.markdown = this.checkType(m, 'markdown')\n\t\t\t\tm.tag = this.checkType(m, 'tag')\n\t\t\t\tm.image = this.checkImageType(m)\n\t\t\t})\n\n\t\t\treturn message\n\t\t}\n\t},\n\n\tmethods: {\n\t\tcheckType(message, type) {\n\t\t\treturn message.types && message.types.indexOf(type) !== -1\n\t\t},\n\t\tcheckImageType(message) {\n\t\t\tlet index = message.value.lastIndexOf('.')\n\t\t\tconst slashIndex = message.value.lastIndexOf('/')\n\t\t\tif (slashIndex > index) index = -1\n\n\t\t\tconst type = message.value.substring(index + 1, message.value.length)\n\n\t\t\tconst isMedia =\n\t\t\t\tindex > 0 && IMAGE_TYPES.some(t => type.toLowerCase().includes(t))\n\n\t\t\tif (isMedia) this.setImageSize(message)\n\n\t\t\treturn isMedia\n\t\t},\n\t\tsetImageSize(message) {\n\t\t\tconst image = new Image()\n\t\t\timage.src = message.value\n\n\t\t\timage.addEventListener('load', onLoad)\n\n\t\t\tfunction onLoad(img) {\n\t\t\t\tconst ratio = img.path[0].width / 150\n\t\t\t\tmessage.height = Math.round(img.path[0].height / ratio) + 'px'\n\t\t\t\timage.removeEventListener('load', onLoad)\n\t\t\t}\n\t\t},\n\t\topenTag(event) {\n\t\t\tconst userId = event.target.getAttribute('data-user-id')\n\t\t\tif (!this.singleLine && userId) {\n\t\t\t\tconst user = this.users.find(u => String(u._id) === userId)\n\t\t\t\tthis.$emit('open-user-tag', user)\n\t\t\t}\n\t\t}\n\t}\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}